type: update
version: 1.6.1
name: WildFly Auto-Cluster
id: wildfly-cluster
targetNodes: none

globals:
  workerUser: worker
  workerPswd: ${fn.password}
  path: /opt/wildfly/ssl/admin
  keystorePass: ${fn.password(24)}

baseUrl: https://raw.githubusercontent.com/jelastic-jps/wildfly/master/addons/auto-clustering

nodeGroupAlias:
  ${settings.nodeGroup}: cp

onInstall:
  - if (nodes.ctrl):
    - if (${settings.clone:false}): 
      - cmd [cp]: jem service restart
      - setRedirectToController: ${nodes.cp.join(id,)}
    - else: buildCluster
  - else: buildCluster

onAfterRedeployContainer[cp]:
- cmd [${event.response.nodes.join(id,)}]: jem service restart
- setRedirectToController: ${nodes.cp.join(id,)}
- if (nodes.ctrl): setJavaMemoryOpts

onAfterServiceScaleOut[cp]:
- copyInternalCertificate: ${event.response.nodes.join(id,)}
- cmd [${event.response.nodes.join(id,)}]: jem service restart
- setRedirectToController: ${event.response.nodes.join(id,)}
- setNodeDisplayName[cp]: Worker
- if (nodes.ctrl): setJavaMemoryOpts

onAfterScaleIn[cp]:
  - if (nodes.ctrl):
    - reloadMasterNode
  
onBeforeRemoveNode [cp]:
  if (nodes.cp.length == 1):
    install:
      type: update
      name: WildFly Auto-Cluster
      id: wildfly-cluster

onAfterServiceScaleOut[bl]:
- setNodeDisplayName[${event.response.nodes.join(id,)}]: Balancer

onAfterSetCloudletCount[cp]:
  if (nodes.ctrl): setJavaMemoryOpts

onAfterRestartNode[cp]:
- setRedirectToController: ${nodes.cp.join(id,)}

onAfterMigrate:
- cmd [ctrl]: jem service restart
- cmd [cp]: jem service restart

onAfterSetExtIpCount[${nodes.cp.master.id}]:
- reloadMasterNode
- cmd [${nodes.cp.master.id}]: |-
    HOST_TO_RELOAD=$(jboss-cli.sh --timeout=30000 --connect controller=localhost:9990 --command="ls host"); 
    jboss-cli.sh --timeout=30000 --connect controller=localhost:9990 --command="reload --host=${HOST_TO_RELOAD}";

actions:
  setJavaMemoryOpts:
    cmd[${nodes.cp.master.id}]: sudo domainMemoryConfig

  migrateToDomain:
    cmd[${nodes.cp.master.id}]: sudo restoreDatasources; sudo migrateDeployments;

  saveDatasources:
    cmd[${nodes.cp.master.id}]: sudo saveDatasources;
    
  copyInternalCertificate:
    - cmd[cp]: sed -i 's/keystore-password=\"jelasticsecurekeypassforwildfly123\"/keystore-password=\"\$\{env.CTRL_KEYSTORE_PASS:jelasticsecurekeypassforwildfly123\}\"/g' /opt/wildfly/domain/configuration/host-slave.xml 
    - cmd[${nodes.ctrl.master.id}]: sed -i 's/keystore-password=\"jelasticsecurekeypassforwildfly123\"/keystore-password=\"\$\{env.KEYSTORE_PASS:jelasticsecurekeypassforwildfly123\}\"/g' /opt/wildfly/domain/configuration/host-master.xml 
    - cmd[${nodes.ctrl.master.id}]: encryptCert getEncFiles
    - cmd[${this:cp}]: encryptCert setEncFiles '${response.out}'
      user: root

  buildCluster:
  - if (nodes.ctrl):
    - env.control.AddContainerEnvVars [${nodes.ctrl.master.id}]:
        vars: {"CTRL":"true", "WORKER_USER": "${globals.workerUser}", "WORKER_PASSWORD":"${globals.workerPswd}", "JBOSS_MODE":"domain", "JELASTIC_EXPOSE":"4949", "PASS":"${fn.password}", "KEYSTORE_PASS":"${globals.keystorePass}"}
    - cmd [ctrl]: service wildfly restart; service jelinit restart
      user: root
  - else:
    - addNodes:
        fixedCloudlets: ${nodes.cp.master.fixedCloudlets}
        flexibleCloudlets: ${nodes.cp.master.flexibleCloudlets}
        displayName: Controller
        nodeType: ${nodes.cp.master.nodeType}
        tag: ${nodes.cp.master.version}
        nodeGroup: ctrl
        metadata:
          layer: ctrl
        dockerEnvVars:
          CTRL: 'true'
          WORKER_USER: ${globals.workerUser}
          WORKER_PASSWORD: ${globals.workerPswd}
          JBOSS_MODE: domain
          JELASTIC_EXPOSE: 4949
          PASS: "${fn.password}"
          KEYSTORE_PASS: "${globals.keystorePass}"
        nodeGroupData:
          validation:
            maxCount: 1
          isClusterSupport: false
          isDeploySupport: false
  - setupCtrl
  - setNodeDisplayName[cp]: Worker
  - migrateToDomain
  - setJavaMemoryOpts
  - api: env.control.SetNodeGroupDisplayName
    nodeGroup: ctrl
    displayName: Domain Controller
  - api: env.control.SetNodeGroupDisplayName
    nodeGroup: cp
    displayName: Workers
  - if (nodes.bl):
      - setNodeDisplayName[bl]: Balancer
  - env.control.AddContainerEnvVars[cp]:
      vars: {"WEBROOT":"/opt/wildfly/domain/servers/worker/tmp/"}

  setupCtrl:
  - addWokerUser:
    ctrlNodeId: ${nodes.ctrl.master.id}
  - linkContainers:
      ids: ${nodes.cp.join(id,)}
  - copyInternalCertificate
  - cmd [cp]: jem service restart
  - setRedirectToController: ${nodes.cp.join(id,)}

  addWokerUser:
  - cmd[ctrl]: $STACK_PATH/bin/add-user.sh $WORKER_USER $WORKER_PASSWORD 2>&1
  - reloadMasterNode

  linkContainers:
    script: |
      var ids = "${this.ids}".split(","), links = [];       
      for (var i = 0, n = ids.length; i < n; i++) 
          links.push({ sourceNodeId: ${nodes.ctrl.master.id}, targetNodeId: ids[i], alias: "ctrl", groupAlias: "ctrl" });
      return { result: 0, onAfterReturn: {"env.control.LinkDockerNodes": links} };

  setRedirectToController:
    cmd[${this}]: sudo setAdminPanelRedirect
    
  uninstallJavaAddon:
    cmd[${this}]: \[ -n "$(find /usr/ -name java.orig)" \] && /usr/java/latest/bin/java --uninstall || true; 
    user: root
    
  reloadMasterNode:
  - if (nodes.ctrl):
    - cmd[${nodes.ctrl.master.id}]: jboss-cli.sh --timeout=30000 --connect controller=localhost:9999 --command="reload --host=master" 

onAfterClone:
  - script: delete MANIFEST.id; return {result:0, jps:MANIFEST};
  - install: ${response.jps}
    envName: ${event.response.env.envName}
    settings:
      nodeGroup: ${settings.nodeGroup} 
      clone: true
