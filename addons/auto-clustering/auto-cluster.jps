jpsType: update
jpsVersion: 1.4
name: WildFly Auto-Cluster
id: wildfly-cluster
targetNodes: none

globals:
  workerUser: worker
  workerPswd: ${fn.password}
  path: /opt/wildfly/ssl/admin

baseUrl: https://raw.githubusercontent.com/jelastic-jps/wildfly/master/addons/auto-clustering

nodeGroupAlias:
  ${settings.nodeGroup}: cp

onInstall:
  - if (!(!'${:}' && '${fn.compareEngine(1.6):}' > 0)):
  - if (nodes.ctrl && nodes.cp.length > 1):
    - setRedirectToController
    - forEach(wnode:nodes.cp):
        cmd[${@wnode.id}]: sed -i "s#http://node.*/console#http://node${nodes.ctrl.master.id}-${env.domain}/console#g" ${STACK_PATH}/welcome-content/index.html
  - if (!nodes.ctrl && nodes.cp.length > 1):
    - buildCluster
  - if (!'${:}' && '${fn.compareEngine(1.6):}' > 0):
    - if (nodes.ctrl):
      - setRedirectToController
      - forEach(wnode:nodes.cp):
          cmd[${@wnode.id}]: sed -i "s#http://node.*/console#http://node${nodes.ctrl.master.id}-${env.domain}/console#g" ${STACK_PATH}/welcome-content/index.html
    - if (!nodes.ctrl):
      - buildCluster
  - if (settings.cloned == 'true'):
    - cmd[ctrl]: jem service restart
    - api [cp]: environment.control.RestartNodesByGroup

onAfterRedeployContainer[cp]:
- api [cp]: environment.control.RestartNodesByGroup
- setRedirectToController
- if (nodes.ctrl): setJavaMemoryOpts

onAfterServiceScaleOut[cp]:
- api [cp]: environment.control.RestartNodesByGroup
- forEach(wnode:nodes.cp):
    updateLink2CtrlConsole:
      nodeId: ${@wnode.id}
      ctrlNodeId: ${nodes.ctrl.master.id}
- setNodeDisplayName[cp]: Worker
- if (nodes.ctrl): setJavaMemoryOpts

onAfterServiceScaleOut[bl]:
- setNodeDisplayName[bl]: Balancer

onAfterAddNode[bl]:
- setNodeDisplayName[bl]: Balancer

onAfterSetCloudletCount[cp]:
  if (nodes.ctrl): setJavaMemoryOpts

onAfterResetNodePassword[cp]:
  if (nodes.ctrl): addAdminUser
  
onAfterResetServicePassword[cp]:
  if (nodes.ctrl): addAdminUser  
  
onAfterRestartNode[cp]:
- setRedirectToController

onAfterSetExtIpCount[${nodes.cp.master.id}]:
- cmd [${nodes.cp.master.id}]: |-
    HOST_TO_RELOAD=$(jboss-cli.sh --timeout=30000 --connect controller=localhost:9990 --command="ls host");
    jboss-cli.sh --timeout=30000 --connect controller=localhost:9990 --command="reload --host=${HOST_TO_RELOAD}";

addons:
  - id: wildfly-build-cluster-addon
    baseUrl: https://raw.githubusercontent.com/jelastic-jps/wildfly/master/addons/auto-clustering

    nodeGroupAlias:
      ${settings.nodeGroup}: cp

    onInstall:
    - setupCtrl
    - if (!(!'${:}' && '${fn.compareEngine(1.6):}' > 0)):
        - addAdminUser
    - setNodeDisplayName[cp]: Worker
    - migrateToDomain
    - setJavaMemoryOpts
    - if (jelastic.env.control.SetNodeGroupDisplayName):
        - api: env.control.SetNodeGroupDisplayName
          nodeGroup: ctrl
          displayName: Domain Controller
        - api: env.control.SetNodeGroupDisplayName
          nodeGroup: cp
          displayName: Workers
    - if (nodes.bl):
        - setNodeDisplayName[bl]: Balancer

actions:
  setJavaMemoryOpts:
    cmd[${nodes.cp.master.id}]: sudo domainMemoryConfig

  migrateToDomain:
    cmd[${nodes.cp.master.id}]: sudo restoreDatasources; sudo migrateDeployments;

  saveDatasources:
    cmd[${nodes.cp.master.id}]: sudo saveDatasources;

  mountSSLDirectory:
    api: env.file.AddMountPointByGroup
    nodeGroup: cp
    path: "${globals.path}"
    protocol: nfs
    sourcePath: "${globals.path}"
    sourceNodeId: "${nodes.ctrl.master.id}"
    name: Internal admin certificates

  buildCluster:
  #for 5.4+
  - if (!'${:}'):
      addNodes:
        fixedCloudlets: ${nodes.cp.master.fixedCloudlets}
        flexibleCloudlets: ${nodes.cp.master.flexibleCloudlets}      
        displayName: Controller
        nodeType: ${nodes.cp.master.nodeType}
        tag: ${nodes.cp.master.version}      
        nodeGroup: ctrl 
        metadata:
          layer: ctrl
        dockerEnvVars:
          CTRL: 'true'
          WORKER_USER: ${globals.workerUser}
          WORKER_PASSWORD: ${globals.workerPswd}
          JBOSS_MODE: domain
          JELASTIC_EXPOSE: 4949
        nodeGroupData:
          validation:
            maxCount: 1
          isClusterSupport: false
          isDeploySupport: false
  #for < 5.4      
  - if ('${:}'):
      addNodes:
        fixedCloudlets: ${nodes.cp.master.fixedCloudlets}
        flexibleCloudlets: ${nodes.cp.master.flexibleCloudlets}      
        displayName: Controller
        dockerName: ${nodes.cp.master.customitem.dockerName}
        dockerTag: ${nodes.cp.master.customitem.dockerTag} 
        nodeGroup: ctrl 
        metadata:
          layer: ctrl
        dockerEnvVars:
          CTRL: 'true'
          WORKER_USER: ${globals.workerUser}
          WORKER_PASSWORD: ${globals.workerPswd}
          JBOSS_MODE: domain
          JELASTIC_EXPOSE: 4949       

  - installAddon:
      id: wildfly-build-cluster-addon      
      settings:
        migrate: ${this.migrate}
        nodeGroup: ${targetNodes.nodeGroup}

  setupCtrl:
  - mountSSLDirectory
  - addWokerUser:
    ctrlNodeId: ${nodes.ctrl.master.id}
  - linkLayers:
      ctrlNodeId: ${nodes.ctrl.master.id}
  - forEach(wnode:nodes.cp):
      updateLink2CtrlConsole:
        nodeId: ${@wnode.id}
        ctrlNodeId: ${nodes.ctrl.master.id}
  - api [cp]: environment.control.RestartNodesByGroup
  - setRedirectToController

  addWokerUser:
    nodeGroup: ctrl
    cmd: $STACK_PATH/bin/add-user.sh $WORKER_USER $WORKER_PASSWORD 2>&1

  addAdminUser:
    script: ${baseUrl}/scripts/setAdminPassword.js?_r=${fn.random}

  linkLayers:
    forEach (wnode:nodes.cp):
      api: env.control.LinkDockerNodes
      sourceNodeId: ${nodes.ctrl.master.id}
      targetNodeId: ${@wnode.id}
      groupAlias: ctrl
      alias: ctrl

  updateLink2CtrlConsole:
    cmd[${this.nodeId}]: sed -i "s#href=\"/console\"#href=\"http://node${nodes.ctrl.master.id}-${env.domain}/console\"#g" ${STACK_PATH}/welcome-content/index.html

  setRedirectToController:
    cmd[cp]: sudo setAdminPanelRedirect

onAfterClone:
  install:
    jps: ${baseUrl}/auto-cluster.jps?_r=${fn.random}
    envName: ${event.response.env.envName}
    nodeGroup: cp
    settings:
      cloned: 'true'
